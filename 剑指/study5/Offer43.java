package study5;

import java.util.Arrays;

public class Offer43 {
//	从 1 到 n 整数中 1 出现的次数
	/*个位：从1至21350中包含了2135个10，因此1出现了2135次，21351，21352，21353，21354其中21351包含了一个1，故个位出现1的次数为：2135*10(1-1) + 1 = 2136次；

			公式：( 2135+1）* 10^(1-1) = 2136；

			十位：从1到21300中包含了213个100，因此1出现了213 * 10^(2-1) = 2130次，剩下的数字是21301到21354，它们的十位数字是5 > 1；因此它会包含10个1；故总数为2130 + 10 = 2140次；

			公式：（213 + 1）* 10^(2-1) = 2140次；

			百位：从1到21000中包含了21个1000，因此1出现了21 * 10^(3-1) = 2100次，剩下的数字是21001到21354，它们的百位数字是3 > 1；因此它会包含100个1；故总数为2100 + 100 = 2200次；

			公式：（21 + 1）* 10^(3-1) = 2200次；

			千位：从1到20000中包含了2个10000，因此1出现了2 * 10^(4-1) = 2000次，剩下的数字是20001到21354，它们的千位数字是1 = 1；情况稍微复杂些，354 + 1 = 355；故1的总数为2000 + 355 = 2355次；

			公式：2 * 10^(4-1) + 354 + 1 = 2355次；

			万位：万位是2 > 1，没有更高位；因此1出现的次数是1 * 10^(5-1) = 10000次；

			公式：（0 + 1）*10^(5-1) = 10000次；

			故总共为：2136+2140+2200+2355+10000=18831次；
			1、取第 i 位左边的数字（高位），乘以 10 ^(i−1) ，得到基础值 a 。
			2、取第 i 位数字，计算修正值： 
				1、如果大于 X，则结果为 a+ 10 ^(i−1) 。
				2、如果小于 X，则结果为 a 。
				3、如果等 X，则取第 i 位右边（低位）数字，设为 b ，最后结果为 a+b+1 

			*/
	public int numberOf1Between1AndN(int n, int x){
		if(n < 0 || x < 1 || x > 9){
			return 0;
		}
		int curr, low, temp, high = n, i = 1, total = 0;
		while(high!=0){
			high = n / (int)Math.pow(10, i); //获取第i位的高位
			temp = n % (int)Math.pow(10, i); //
			curr = temp / (int)Math.pow(10, i-1); //获取第i位
			low = temp%(int)Math.pow(10, i-1); //获取第i位的低位
			if(curr == x){ //等于x
				total += high*(int)Math.pow(10, i-1)+ low + 1;
			}else if(curr < x){ //小于x
				total += high*(int) Math.pow(10, i-1);
			}else{ //大于x
				total += (high + 1) * (int)Math.pow(10, i-1);
			}
			i++;
		}
		return total;
	}

}
